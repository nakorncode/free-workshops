---
import { z } from 'astro/zod'
import BookTable from '../components/BookTable.astro'
import { books } from '../data/books'
import DefaultLayout from '../layouts/DefaultLayout.astro'
import { clone, orderBy, sumBy } from 'lodash-es'

const querySchema = z
  .object({
    title: z.string().optional(),
    author: z.string().optional(),
    costMin: z.string().optional(),
    costMax: z.string().optional(),
    sortBy: z
      .enum(['title', 'author', 'totalStar', 'totalReview', 'releasedDate'])
      .optional(),
    order: z.enum(['asc', 'desc']).optional(),
  })
  .superRefine((data, ctx) => {
    if ((data.costMin && !data.costMax) || (!data.costMin && data.costMax)) {
      ctx.addIssue({
        path: data.costMin ? ['costMin'] : ['costMax'],
        message: 'ต้องมีทั้งข้อมูล costMin และ costMax',
        code: z.ZodIssueCode.custom,
      })
    }
    if ((data.order && !data.sortBy) || (!data.order && data.sortBy)) {
      ctx.addIssue({
        path: data.order ? ['order'] : ['sortBy'],
        message: 'ต้องมีทั้งข้อมูล order และ sortBy',
        code: z.ZodIssueCode.custom,
      })
    }
  })

const url = new URL(Astro.request.url)
const query = querySchema.parse(Object.fromEntries(url.searchParams.entries()))

let resultBooks = clone(books)

if (query.title) {
  resultBooks = resultBooks.filter((book) => {
    return book.title.toLowerCase().includes(query.title!.toLowerCase())
  })
}
if (query.author) {
  resultBooks = resultBooks.filter((book) => {
    return book.author.toLowerCase().includes(query.author!.toLowerCase())
  })
}
if (query.costMin && query.costMax) {
  const costMin = parseFloat(query.costMin)
  const costMax = parseFloat(query.costMax)
  resultBooks = resultBooks.filter((book) => {
    return book.cost >= costMin && book.cost <= costMax
  })
}
if (query.sortBy && query.order) {
  const { sortBy: querySortBy, order: queryOrder } = query
  if (
    querySortBy === 'title' ||
    querySortBy === 'author' ||
    querySortBy === 'releasedDate'
  ) {
    resultBooks = orderBy(resultBooks, (book) => book[querySortBy], queryOrder)
  } else if (querySortBy === 'totalReview') {
    resultBooks = orderBy(
      resultBooks,
      (book) => book.reviews.length,
      queryOrder
    )
  } else if (querySortBy === 'totalStar') {
    resultBooks = orderBy(
      resultBooks,
      (book) => {
        const totalStar = sumBy(book.reviews, 'star')
        return book.reviews.length > 0 ? totalStar / book.reviews.length : 0
      },
      queryOrder
    )
  }
}
---

<DefaultLayout>
  <BookTable books={resultBooks} />
</DefaultLayout>
